// 12 COLUMN FLEXBOX GRID - PARTIAL
// =============================================================================
// Relies on the Flexbox mixins to provide a 12-column grid, not dissimilar from
// Twitter Bootstrap.

// Inspiration:
// https://github.com/kristoferjoseph/flexboxgrid/
// http://v4-alpha.getbootstrap.com/layout/overview/


// VARIABLES
// =============================================================================
$grid-columns: 12;
$grid-sizes: xs sm md lg xl;

$gutter-width: 1rem;
$outer-margin: 2rem;
$gutter-compensation: -1 * ($gutter-width * 0.5);
$half-gutter-width: $gutter-width * 0.5;

$xs-min: 30;
$sm-min: 48;
$md-min: 64;
$lg-min: 75;

$screen-xs-min: #{$xs-min}em;
$screen-sm-min: #{$sm-min}em;
$screen-md-min: #{$md-min}em;
$screen-lg-min: #{$lg-min}em;

$container-sm: $sm-min + $gutter-width;
$container-md: $md-min + $gutter-width;
$container-lg: $lg-min + $gutter-width;


// MIXINS
// =============================================================================
@mixin generateColumnRulesFor( $size ) {
  $col-list: ( unquote(".col-#{$size}"), unquote(".col-#{$size}-offset-0") );

  // Any col-* with no size information will take the full width of the parent
  .col-#{$size} {
    @include flex-grow( 1 );
    @include flex-basis( 0 );
    max-width: 100%;
  }

  // Any *-offset-0 will reset the left margin to 0
  .col-#{$size}-offset-0 {
    margin-left: 0;
  }


  // Returns all the size and offset classes appended to the list, and applies
  // common styles to all of them.
  @for $i from 1 through $grid-columns {
    $col-list: append($col-list, unquote(".col-#{$size}-#{$i}"), comma);
    $col-list: append($col-list, unquote(".col-#{$size}-offset-#{$i}"), comma);
  }

  #{$col-list} {
    box-sizing: border-box;
    @include flex( 0 0 auto );
    padding-right: $half-gutter-width;
    padding-left: $half-gutter-width;
  }


  // Calculates the width for each column definition based on the total number
  // of columns. While this could be accomplished in the loop above, there is no
  // elegant way to write the #{$col-list} definition first. Without this second
  // loop, no column will have the correct definion, having its flex-basis
  // overwritten by the cascade with "auto" instead.
  @for $i from 1 through $grid-columns {
    $percent: ( $i/$grid-columns ) * 100%;

    .col-#{$size}-#{$i} {
      @include flex-basis( $percent );
      max-width: $percent;
    }

    .col-#{$size}-offset-#{$i} {
      margin-left: $percent;
    }
  }

  // Positioning rules for each size
  .start-#{$size} {
    @include justify-content( flex-start );
    text-align: start;
  }

  .center-#{$size} {
    @include justify-content( center );
    text-align: center;
  }

  .end-#{$size} {
    @include justify-content( flex-end );
    text-align: end;
  }

  .top-#{$size}    { @include align-items( flex-start ); }
  .middle-#{$size} { @include align-items( center ); }
  .bottom-#{$size} { @include align-items( flex-end ); }

  .around-#{$size}  { @include justify-content( space-around ); }
  .between-#{$size} { @include justify-content( space-between ); }

  .first-#{$size} { order: -1; }
  .last-#{$size}  { order: 1; }
}


// RULES
// =============================================================================
.container {
  margin-right: auto;
  margin-left: auto;
}

.row {
  box-sizing: border-box;
  @include flex-display( flex );
  @include flex( 0 1 auto );
  @include flex-direction( row );
  @include flex-wrap( wrap );

  .reverse { @include flex-direction( row-reverse ); }
}

.col.reverse {
  @include flex-direction( column-reverse );
}

@include generateColumnRulesFor( "xs" );

@media #{$sm-viewport} {
  .container { width: $container-sm; }

  .container-fluid {
    width: 100%;
    padding-right: $outer-margin;
    padding-left: $outer-margin;
  }

  .row {
    margin-right: $gutter-compensation;
    margin-left: $gutter-compensation;
  }

  @include generateColumnRulesFor( "sm" );
}

@media #{$md-viewport} {
  .container { width: $container-md; }
  @include generateColumnRulesFor( "md" );
}

@media #{$lg-viewport} {
  .container { width: $container-lg; }
  @include generateColumnRulesFor( "lg" );
}
